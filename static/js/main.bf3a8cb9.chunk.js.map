{"version":3,"sources":["rootSlice.js","Step1.js","Step2.js","Step3.js","Step4.js","Result.js","App.js","serviceWorker.js","store.js","index.js"],"names":["rootSlice","createSlice","name","initialState","base","crust","sauce","cheese","reducers","chooseBase","state","action","payload","chooseCrust","chooseSauce","sauc","chooseCheese","reducer","actions","Step1","dispatch","useDispatch","history","useHistory","useSelector","useForm","defaultValues","register","handleSubmit","onSubmit","data","push","htmlFor","id","ref","value","Step2","Step3","Step4","Result","JSON","stringify","to","App","exact","path","component","Boolean","window","location","hostname","match","store","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bf3a8cb9.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst rootSlice = createSlice({\r\n  name: \"root\",\r\n  initialState: {\r\n    base: \"small\",\r\n    crust: \"classic_thin\",\r\n    sauce: \"no_sauce\",\r\n    cheese: \"no_cheese\"\r\n  },\r\n  reducers: {\r\n    chooseBase: (state, action) => { state.base = action.payload },\r\n    chooseCrust: (state, action) => { state.crust = action.payload },\r\n    chooseSauce: (state, action) => { state.sauc = action.payload },\r\n    chooseCheese: (state, action) => { state.cheese = action.payload },\r\n  }\r\n})\r\n\r\nexport const reducer = rootSlice.reducer;\r\n\r\nexport const { chooseBase, chooseCheese, chooseCrust, chooseSauce } = rootSlice.actions","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport {useForm} from 'react-hook-form'\r\nimport { chooseBase } from './rootSlice'\r\n\r\nexport const Step1 = () => {\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n  const base = useSelector(state => state.base)\r\n  const { register, handleSubmit } = useForm({ defaultValues: { base } })\r\n\r\n  const onSubmit = (data) => {\r\n    dispatch(chooseBase(data.base))\r\n    history.push(\"./step2\")\r\n  } \r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <div>\r\n        <label htmlFor=\"base\">Pick base:</label>\r\n        <select id=\"base\" name=\"base\" ref={register}>\r\n          <option value=\"small\">Small</option>\r\n          <option value=\"medium\">Medium</option>\r\n          <option value=\"large\">Large</option>\r\n        </select>\r\n      </div>\r\n      <button>Next</button>\r\n    </form>\r\n  )\r\n}","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { chooseCrust } from \"./rootSlice\";\r\n\r\nexport const Step2 = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory()\r\n  const crust = useSelector(state => state.crust)\r\n  const { register, handleSubmit } = useForm({defaultValues: {crust}});\r\n\r\n  const onSubmit = (data) => {\r\n    dispatch(chooseCrust(data.crust));\r\n    history.push(\"./step3\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <div>\r\n        <label htmlFor=\"crust\">Pick crust:</label>\r\n        <select id=\"crust\" name=\"crust\" ref={register}>\r\n          <option value=\"classic_thin\">Classic Thin</option>\r\n          <option value=\"deep_pan\">Deep Pan</option>\r\n          <option value=\"filled_crust\">Filled Crust</option>\r\n        </select>\r\n      </div>\r\n      <button>Next</button>\r\n    </form>\r\n  );\r\n};","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { chooseCheese } from \"./rootSlice\";\r\n\r\nexport const Step3 = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory()\r\n  const cheese = useSelector(state => state.cheese)\r\n  const { register, handleSubmit } = useForm({defaultValues: {cheese}});\r\n\r\n  const onSubmit = (data) => {\r\n    dispatch(chooseCheese(data.cheese));\r\n    history.push(\"./step4\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <div>\r\n        <label htmlFor=\"cheese\">Pick cheese:</label>\r\n        <select id=\"cheese\" name=\"cheese\" ref={register}>\r\n          <option value=\"no_cheese\">No Cheese</option>\r\n          <option value=\"mozarella\">Mozarella</option>\r\n          <option value=\"parmigiano\">Parmigiano</option>\r\n        </select>\r\n      </div>\r\n      <button>Next</button>\r\n    </form>\r\n  );\r\n};","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { chooseSauce } from \"./rootSlice\";\r\n\r\nexport const Step4 = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory()\r\n  const sauce = useSelector(state => state.sauce)\r\n  const { register, handleSubmit } = useForm({defaultValues: {sauce}});\r\n\r\n  const onSubmit = (data) => {\r\n    dispatch(chooseSauce(data.sauce));\r\n    history.push(\"./result\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <div>\r\n        <label htmlFor=\"sauce\">Pick Sauce:</label>\r\n        <select id=\"sauce\" name=\"sauce\" ref={register}>\r\n          <option value=\"no_sauce\">No Sauce</option>\r\n          <option value=\"tomato\">Tomato</option>\r\n          <option value=\"spicy_tomato\">Spicy Tomato</option>\r\n        </select>\r\n      </div>\r\n      <button>Complete</button>\r\n    </form>\r\n  );\r\n};","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const Result = () => {\r\n  const state = useSelector(state => state)\r\n\r\n  return (\r\n    <>\r\n      <pre>{JSON.stringify(state, null, 2)}</pre>\r\n      <Link to=\"/\">Start over</Link>\r\n    </>\r\n  )\r\n}","import React from \"react\";\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport {Step1} from './Step1'\r\nimport {Step2} from './Step2'\r\nimport {Step3} from './Step3'\r\nimport {Step4} from './Step4'\r\nimport {Result} from './Result'\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Route exact path=\"/\" component={Step1}/>\r\n      <Route path=\"/step2\" component={Step2}/>\r\n      <Route path=\"/step3\" component={Step3}/>\r\n      <Route path=\"/step4\" component={Step4}/>\r\n      <Route path=\"/result\" component={Result}/>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport {reducer} from './rootSlice'\r\n\r\nexport const store = configureStore({\r\n  reducer\r\n})","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from './store'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}